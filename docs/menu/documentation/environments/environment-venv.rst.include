

`venv -- Environment <env-venv_>`_ {{ pref_symbol }}
-------------------------------------------------------

venv is Python's standard tool for creating lightweight virtual environments. 
Each environment is a directory that contains a complete Python installation. 
Deleting this directory effectively deletes the environment.


.. _environment-venv-vscode:

Setting Up venv in VS Code
^^^^^^^^^^^^^^^^^^^^^^^^^^

VS Code helps managing virtual environments through some built-in commands. 
Here is a brief explanation on how to set up a virtual environment in VS Code:

.. warning::
   If you encounter problems with virtual environments in VS Code, please see
   :ref:`here <faq-vscode-venv-workspace>`.

First, check that you are already in a virtual environment (see point 5 below). If not, proceed to the next step.

1. Create a folder/directory according to the course you wish to work on.
   
   *This is optional but helps keep your projects organized.*.

2. Press :guilabel:`Open Folder` to start working in the designated course
   folder. If you already have several opened folders, this will not be
   visible. Just select the workspace.

   .. image:: /menu/images/vscode-open-folder.png
      :width: 700
      :align: center
      :alt: Open folder in VS Code

3. Once you are in a folder/workspace we should create a virtual
   environment. Press :kbd:`Ctrl+Shift+P` and search for
   ``Python: Create Environment...``, and select that.

   .. image:: /menu/images/vscode-python-env.png
      :width: 600
      :align: center
      :alt: VS Code command prompt

4. Next, select the option below:

   .. image:: /menu/images/vscode-python-env-venv.png
      :width: 600
      :align: center
      :alt: VS Code venv creation

5. Check that the virtual environment is functional. Sometimes you need
   to run a small Python script to enable the virtual environment,
   either press :fas:`arrow-right`, or :kbd:`Shift-Enter`

   .. image:: /menu/images/vscode-python-env-venv-check.png
      :width: 700
      :align: center
      :alt: Check if virtual environment is enabled through VS Code


Using venv in the Terminal
^^^^^^^^^^^^^^^^^^^^^^^^^^

The package `venv <env-venv_>`_ creates :ref:`environments <python-environments>` using the :ref:`pip` method.
Once an environment has been created and sourced (activated), all pip commands only act within that environment.

.. note::

    The ``venv`` package can only create environments with different packages.
    It cannot switch between different Python versions.

    An environment will be a directory on your computer. Deleting
    it will be the same as deleting the environment.

.. warning::
   Environments in :ref:`ide-vscode` requires special handling when
   working in workspaces. Please see :ref:`here <faq-vscode-venv-workspace>`.


An environment can be created using:

.. tab-set::

   .. tab-item:: {{ win_powershell }}
      :sync: powershell

      .. code-block:: powershell

         python -m venv <path to venv>
         # create an environment named 'course-A' in the current directory
         python -m venv course-A

   .. tab-item:: {{ win_batch }}
      :sync: batch

      .. code-block:: winbatch

         python -m venv <path to venv>
         # create an environment named 'course-A' in the current directory
         python -m venv course-A

   .. tab-item:: {{ mac_bash }}
      :sync: mac

      .. code-block:: bash

         python3 -m venv <path to venv>
         # create an environment named 'course-A' in the current directory
         python3 -m venv course-A

   .. tab-item:: {{ linux_bash }}
      :sync: bash

      .. code-block:: bash

         python3 -m venv <path to venv>
         # create an environment named 'course-A' in the current directory
         python3 -m venv course-A

Once created, one can *activate*/use the environment by *sourcing* a file.
Change ``course-A`` with the name of the environment.

.. tab-set::

   .. tab-item:: {{ win_powershell }}
      :sync: powershell

      .. warning::
         Please see :ref:`this FAQ entry <faq-win-ps-execution-policy>`!

      .. code-block:: powershell

         course-A\Scripts\Activate.ps1

   .. tab-item:: {{ win_batch }}
      :sync: batch
      
      .. warning::
         Please see :ref:`this FAQ entry <faq-win-ps-execution-policy>`!

      .. code-block:: winbatch

         course-A\Scripts\activate.bat

   .. tab-item:: {{ mac_bash }}
      :sync: mac

      .. code-block:: bash

         source course-A/bin/activate

   .. tab-item:: {{ linux_bash }}
      :sync: bash

      .. code-block:: bash

         source course-A/bin/activate


Now, every executed Python script will only use the packages installed
in the environment, and every ``pip`` command will only install/remove packages
in the environment.
To exit the environment, simply run the command ``deactivate``.

Below is an example workflow of creating an environment, installing a specific
package, running a code using the environment, and exiting the environment.

.. tab-set::

   .. tab-item:: {{ win_powershell }}
      :sync: powershell

      .. code-block:: powershell

         python -m venv numpy-env
         numpy-env\Scripts\Activate.ps1
         pip install "numpy==1.23.*"
         python -c "import numpy as np ; print(np.__version__)"
         deactivate

   .. tab-item:: {{ win_batch }}
      :sync: batch

      .. code-block:: winbatch

         python -m venv numpy-env
         numpy-env\Scripts\activate.bat
         pip install "numpy==1.23.*"
         python -c "import numpy as np ; print(np.__version__)"
         deactivate

   .. tab-item:: {{ mac_bash }}
      :sync: mac

      .. code-block:: bash

         python3 -m venv numpy-env
         source numpy-env/bin/activate
         pip install "numpy==1.23.*"
         python3 -c "import numpy as np ; print(np.__version__)"
         deactivate

   .. tab-item:: {{ linux_bash }}
      :sync: bash

      .. code-block:: bash

         python3 -m venv numpy-env
         source numpy-env/bin/activate
         pip install "numpy==1.23.*"
         python3 -c "import numpy as np ; print(np.__version__)"
         deactivate
